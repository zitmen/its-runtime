(Program [(FunctionDefinition main null (BlockStatement [(ExpressionStatement (BinaryExpression = (Variable f [] false null) (FunctionCall openFile (ExpressionList [(StringAtom 'vstup.txt')])))), (ExpressionStatement (BinaryExpression = (Variable n [] false null) (FunctionCall input (ExpressionList [(Variable f [] false null)])))), (ExpressionStatement (BinaryExpression = (Variable M [] false null) (FunctionCall input (ExpressionList [(Variable f [] false null)])))), (ForStatement (BinaryExpression = (Variable i [] false null) (IntegerAtom 0)) (BinaryExpression < (Variable i [] false null) (Variable n [] false null)) (BinaryExpression += (Variable i [] false null) (IntegerAtom 1)) (ExpressionStatement (BinaryExpression = (Variable stuff [(Variable i [] false null)] true null) (ArrayConstructor {(StringAtom 'cost')=(FunctionCall input (ExpressionList [(Variable f [] false null)])), (StringAtom 'weight')=(FunctionCall input (ExpressionList [(Variable f [] false null)]))})))), (ExpressionStatement (FunctionCall closeFile (ExpressionList [(Variable f [] false null)]))), (ExpressionStatement (BinaryExpression = (Variable result [] false null) (FunctionCall computeSolution (ExpressionList [(Variable n [] false null), (Variable M [] false null), (Variable stuff [] false null)])))), (ExpressionStatement (BinaryExpression = (Variable f [] false null) (FunctionCall openFile (ExpressionList [(StringAtom 'vystup.txt')])))), (ExpressionStatement (FunctionCall output (ExpressionList [(Variable f [] false null), (BinaryExpression + (StringAtom 'Cena: ') (StringAtom '\nKonfigurace: '))]))), (ForStatement (BinaryExpression = (Variable i [] false null) (IntegerAtom 0)) (BinaryExpression < (Variable i [] false null) (Variable n [] false null)) (BinaryExpression += (Variable i [] false null) (IntegerAtom 1)) (ExpressionStatement (FunctionCall output (ExpressionList [(Variable f [] false null), (BinaryExpression + (StringAtom ' ') (Variable result [(Variable i [] false null)] true null))])))), (ExpressionStatement (FunctionCall closeFile (ExpressionList [(Variable f [] false null)])))])), (FunctionDefinition iterate (ExpressionList [(Variable n [] false null), (Variable conf [] false null)]) (BlockStatement [(ForStatement (BinaryExpression = (Variable i [] false null) (IntegerAtom 0)) (BinaryExpression < (Variable i [] false null) (Variable n [] false null)) (UnaryExpression null (Variable i [] false null) ++) (BlockStatement [(IfStatement (BinaryExpression == (Variable conf [(Variable i [] false null)] true null) (IntegerAtom 1)) (ExpressionStatement (BinaryExpression = (Variable conf [(Variable i [] false null)] true null) (IntegerAtom 0))) (BlockStatement [(ExpressionStatement (BinaryExpression = (Variable conf [(Variable i [] false null)] true null) (IntegerAtom 1))), (BreakStatement)]))])), (IfStatement (BinaryExpression >= (UnaryExpression ++ (Variable counter [] false null) null) (Variable modul [] false null)) (BlockStatement [(ExpressionStatement (BinaryExpression = (Variable counter [] false null) (IntegerAtom 0))), (ReturnStatement (BooleanAtom false))]) null), (ReturnStatement (BooleanAtom true))])), (FunctionDefinition weight (ExpressionList [(Variable n [] false null), (Variable stuff [] false null), (Variable conf [] false null)]) (BlockStatement [(ExpressionStatement (BinaryExpression = (Variable w [] false null) (IntegerAtom 0))), (ForStatement (BinaryExpression = (Variable i [] false null) (IntegerAtom 0)) (BinaryExpression < (Variable i [] false null) (Variable n [] false null)) (UnaryExpression null (Variable i [] false null) ++) (IfStatement (Variable conf [(Variable i [] false null)] true null) (ExpressionStatement (BinaryExpression += (Variable w [] false null) (Variable stuff [(Variable i [] false null)] true null))) null)), (ReturnStatement (Variable w [] false null))])), (FunctionDefinition cost (ExpressionList [(Variable n [] false null), (Variable stuff [] false null), (Variable conf [] false null)]) (BlockStatement [(ExpressionStatement (BinaryExpression = (Variable c [] false null) (IntegerAtom 0))), (ForStatement (BinaryExpression = (Variable i [] false null) (IntegerAtom 0)) (BinaryExpression < (Variable i [] false null) (Variable n [] false null)) (UnaryExpression null (Variable i [] false null) ++) (IfStatement (Variable conf [(Variable i [] false null)] true null) (ExpressionStatement (BinaryExpression += (Variable c [] false null) (Variable stuff [(Variable i [] false null)] true null))) null)), (ReturnStatement (Variable c [] false null))])), (FunctionDefinition computeSolution (ExpressionList [(Variable n [] false null), (Variable M [] false null), (Variable stuff [] false null)]) (BlockStatement [(ExpressionStatement (BinaryExpression = (Variable cur_cost [] false null) (IntegerAtom 0))), (ExpressionStatement (BinaryExpression = (Variable max_cost [] false null) (IntegerAtom 0))), (ExpressionStatement (BinaryExpression = (Variable conf [] false null) (ArrayConstructor {}))), (ExpressionStatement (BinaryExpression = (Variable solution [] false null) (ArrayConstructor {}))), (WhileStatement (FunctionCall iterate (ExpressionList [(Variable n [] false null), (Variable conf [] false null)])) (BlockStatement [(IfStatement (BinaryExpression <= (FunctionCall weight (ExpressionList [(Variable n [] false null), (Variable stuff [] false null), (Variable conf [] false null)])) (Variable M [] false null)) (BlockStatement [(IfStatement (BinaryExpression > (BinaryExpression = (Variable cur_cost [] false null) (FunctionCall cost (ExpressionList [(Variable n [] false null), (Variable stuff [] false null), (Variable conf [] false null)]))) (Variable max_cost [] false null)) (BlockStatement [(ExpressionStatement (BinaryExpression = (Variable max_cost [] false null) (Variable cost [] false null))), (ExpressionStatement (BinaryExpression = (Variable solution [] false null) (Variable conf [] false null)))]) null)]) null)])), (ReturnStatement (ArrayConstructor {(StringAtom 'stuff')=(Variable solution [] false null), (StringAtom 'cost')=(Variable max_cost [] false null)}))]))])
